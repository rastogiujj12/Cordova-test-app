{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Menu","SubMenu","Select","App","Form","useForm","form","useState","drawer","setdrawer","title","width","onClose","visible","bodyStyle","paddingBottom","footer","style","textAlign","onClick","marginRight","layout","hideRequiredMark","id","onFinish","values","console","log","QRCode","toCanvas","document","getElementById","JSON","stringify","toSJISFunc","toSJIS","error","gutter","span","Item","name","label","rules","required","message","placeholder","value","TextArea","rows","shouldUpdate","type","htmlType","disabled","isFieldsTouched","getFieldsError","filter","errors","length","className","background","subTitle","ghost","extra","key","avatar","src","marginTop","PlusOutlined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"iXAQQA,GADYC,IAAZC,QACWC,IAAXH,QA+HOI,MA7Hf,WAAgB,IAAD,EACEC,IAAKC,UAAbC,EADM,sBAEeC,oBAAS,GAFxB,mBAENC,EAFM,KAEEC,EAFF,KAcb,OACE,6BACI,kBAAC,IAAD,CACEC,MAAM,kBACNC,MAAO,IACPC,QAAS,kBAAMH,GAAU,IACzBI,QAASL,EACTM,UAAW,CAAEC,cAAe,IAC5BC,OACE,yBACEC,MAAO,CACLC,UAAW,UAGb,kBAAC,IAAD,CACEC,QAAS,kBAAMV,GAAU,IACzBQ,MAAO,CAAEG,YAAa,IAFxB,YASJ,kBAAC,IAAD,CAAMC,OAAO,WAAWC,kBAAgB,EAACC,GAAG,YAAYC,SAjC/C,SAAAC,GACfC,QAAQC,IAAI,UAAWF,GACvBG,IAAOC,SAASC,SAASC,eAAe,UACtCC,KAAKC,UAAUR,GAAS,CAAES,WAAYN,IAAOO,SAAU,SAAUC,GAC7DA,GAAOV,QAAQU,MAAMA,GACzBV,QAAQC,IAAI,eAEdlB,GAAU,KA2BF,kBAAC,IAAD,CAAK4B,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAKC,KAAN,CACEC,KAAK,OACLC,MAAM,eACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAEnC,kBAAC,IAAD,CAAOC,YAAY,gCAGvB,kBAAC,IAAD,CAAKP,KAAM,IACT,kBAAC,IAAKC,KAAN,CACEC,KAAK,KACLC,MAAM,cACNC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,CAAQC,YAAY,+BAClB,kBAAC9C,EAAD,CAAQ+C,MAAM,SAAd,SACA,kBAAC/C,EAAD,CAAQ+C,MAAM,YAAd,gBAKR,kBAAC,IAAD,CAAKT,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAKC,KAAN,CACEC,KAAK,cACLC,MAAM,cACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sCAIb,kBAAC,IAAMG,SAAP,CAAgBC,KAAM,EAAGH,YAAY,wCAI3C,kBAAC,IAAD,CAAKR,OAAQ,IACX,kBAAC,IAAD,CAAKC,KAAM,IACX,kBAAC,IAAKC,KAAN,CAAWU,cAAY,IACtB,kBACC,kBAAC,IAAD,CACEC,KAAK,UACLC,SAAS,SACTC,UACG9C,EAAK+C,iBAAgB,IACtB/C,EAAKgD,iBAAiBC,QAAO,qBAAGC,OAAoBC,UAAQA,QALhE,sBAmBR,kBAAC,IAAD,CACIC,UAAU,mBACVzC,MAAO,CAAC0C,WAAY,QACpBjD,MAAM,UACNkD,SAAS,uBACTC,OAAO,EACPC,MAAO,CACL,kBAAC,IAAD,CAAQC,IAAI,KAAZ,WAEFC,OAAQ,CAAEC,IAAK,gHAInB,yBAAKhD,MAAO,CAACC,UAAW,SAAUgD,UAAW,QAC3C,kBAAC,IAAD,CAAQhB,KAAK,UAAU/B,QAAS,kBAAMV,GAAU,KAC9C,kBAAC0D,EAAA,EAAD,MADF,iBAIF,yBAAKlD,MAAO,CAACC,UAAW,SAAUgD,UAAW,QAC3C,4BAAQ3C,GAAG,cCrHD6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASC,eAAe,SDyHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLV,QAAQU,MAAMA,EAAMQ,c","file":"static/js/main.8837c963.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { PageHeader, Button, Menu, Drawer, Form, Col, Row, Input, Select, DatePicker } from 'antd';\nimport QRCode from 'qrcode'\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst { SubMenu } = Menu;\nconst { Option } = Select;\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [drawer, setdrawer] = useState(false);\n\n  const onFinish = values => {\n    console.log('Finish:', values);\n    QRCode.toCanvas(document.getElementById('canvas'),\n      JSON.stringify(values), { toSJISFunc: QRCode.toSJIS }, function (error) {\n      if (error) console.error(error);\n      console.log('success!');\n    });\n    setdrawer(false);\n  };\n\n  return (\n    <div>\n        <Drawer\n          title=\"Generate new QR\"\n          width={720}\n          onClose={() => setdrawer(false)}\n          visible={drawer}\n          bodyStyle={{ paddingBottom: 80 }}\n          footer={\n            <div\n              style={{\n                textAlign: 'right',\n              }}\n            >\n              <Button\n                onClick={() => setdrawer(false)}\n                style={{ marginRight: 8 }}\n              >\n                Cancel\n              </Button>\n            </div>\n          }\n        >\n          <Form layout=\"vertical\" hideRequiredMark id=\"forminput\" onFinish={onFinish}>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Form.Item\n                  name=\"name\"\n                  label=\"Product Name\"\n                  rules={[{ required: true, message: 'Please enter product name' }]}\n                >\n                  <Input placeholder=\"Please enter product name\" />\n                </Form.Item>\n              </Col>\n              <Col span={12}>\n                <Form.Item\n                  name=\"tl\"\n                  label=\"Team leader\"\n                  rules={[{ required: true, message: 'Please select a Team leader' }]}\n                >\n                  <Select placeholder=\"Please select a Team Leader\">\n                    <Option value=\"Mihai\">Mihai</Option>\n                    <Option value=\"Ancorman\">Ancorman</Option>\n                  </Select>\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={24}>\n                <Form.Item\n                  name=\"description\"\n                  label=\"Description\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'please enter product description',\n                    },\n                  ]}\n                >\n                  <Input.TextArea rows={4} placeholder=\"please enter product description\" />\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={16}>\n              <Col span={24}>\n              <Form.Item shouldUpdate>\n              {() => (\n                <Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  disabled={\n                    !form.isFieldsTouched(true) ||\n                    form.getFieldsError().filter(({ errors }) => errors.length).length\n                  }\n                >\n                  Generate QR\n                </Button>\n              )}\n                {/* <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  Generate QR\n                </Button> */}\n              </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </Drawer>\n        <PageHeader\n            className=\"site-page-header\"\n            style={{background: \"aqua\"}}\n            title=\"Tracsys\"\n            subTitle=\"Inventory management\"\n            ghost={true}\n            extra={[\n              <Button key=\"3\">Logout</Button>,\n            ]}\n            avatar={{ src: 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Hamburger_icon.svg/1200px-Hamburger_icon.svg.png' }}\n        >\n        </PageHeader>\n\n        <div style={{textAlign: \"center\", marginTop: \"10%\"}}>\n          <Button type=\"primary\" onClick={() => setdrawer(true)}>\n            <PlusOutlined /> New QR code\n          </Button>\n        </div>\n        <div style={{textAlign: \"center\", marginTop: \"10%\"}}>\n          <canvas id=\"canvas\"></canvas>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}